import React, { useState, useEffect } from 'react';
import './App.css';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

// FontAwesome setup
import { library } from '@fortawesome/fontawesome-svg-core';
import { faTelegram } from '@fortawesome/free-brands-svg-icons';
import { faDownload, faCog, faLock, faLockOpen, faChevronLeft, faChevronRight, faCalendarDays } from '@fortawesome/free-solid-svg-icons';

// Add icons to the library
library.add(faTelegram, faDownload, faCog, faLock, faLockOpen, faChevronLeft, faChevronRight, faCalendarDays);

import { useLocalStorage } from './hooks/useLocalStorage';
import { useAblyConnection } from './hooks/useAblyConnection';
import { defaultEmployees, defaultShiftTypes, defaultFilters, initialData, defaultTags, dayLabels } from './constants/defaultData';
import { injectShiftStyles } from './utils/styleUtils';

import Header from './components/Header';
import Legend from './components/Legend';
import GridView from './components/GridView';
import TimelineView from './components/TimelineView';
import GanttView from './components/GanttView';
import SettingsModal from './components/SettingsModal';
import ShiftAndTagPopup from './components/ShiftAndTagPopup';
import AuthModal from './components/AuthModal';
import CalendarNavigation from './components/CalendarNavigation';

function App() {
  const [settings, setSettings] = useLocalStorage('schedule-planner-settings', {
    employees: defaultEmployees,
    shiftTypes: defaultShiftTypes,
    tags: defaultTags,
    websocket: {
      url: '',
      apiKey: '',
      roomId: '',
      enabled: false
    },
    telegram: {
      enabled: false,
      botToken: '',
      chatId: ''
    },
    admins: [],
    debug: true  // –í–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–∫—É –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  });

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
  useEffect(() => {
    console.log('üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å:', settings.admins);
  }, [settings.admins]);

  const [schedule, setSchedule] = useLocalStorage('schedule-planner-data', () => {
    const initial = {};
    settings.employees.forEach((emp, empIndex) => {
      for (let day = 0; day < 14; day++) {
        const key = `${empIndex}-${day}`;
        if (initialData[emp] && day < initialData[emp].length) {
          initial[key] = initialData[emp][day];
        }
      }
    });
    return initial;
  });

  const [currentView, setCurrentView] = useLocalStorage('schedule-planner-view', 'grid');
  const [selectedDay, setSelectedDay] = useLocalStorage('schedule-planner-selected-day', null);
  const [filters, setFilters] = useLocalStorage('schedule-planner-filters', defaultFilters);
  const [cellTags, setCellTags] = useLocalStorage('schedule-planner-tags', {});
  
  // –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  const getDefaultStartDate = () => {
    // –ù–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
    const today = new Date();
    const dayOfWeek = today.getDay();
    const monday = new Date(today);
    monday.setDate(today.getDate() - (dayOfWeek === 0 ? 6 : dayOfWeek - 1));
    return monday.toISOString().split('T')[0];
  };
  
  const [currentStartDate, setCurrentStartDate] = useLocalStorage('schedule-planner-start-date', getDefaultStartDate());
  const [viewPeriod, setViewPeriod] = useLocalStorage('schedule-planner-view-period', 14);

  const [popup, setPopup] = useState({ open: false, empIndex: null, dayIndex: null, selectedTags: [] });
  const [settingsModal, setSettingsModal] = useState(false);
  const [bulkEditMode, setBulkEditMode] = useState(false);
  const [selectedCells, setSelectedCells] = useState(new Set());
  const [dropdownOpen, setDropdownOpen] = useState(false);
  const [isAuthenticated, setIsAuthenticated] = useLocalStorage('schedule-planner-auth', true); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  const [authModal, setAuthModal] = useState(false);

  const handleScheduleUpdate = (newSchedule) => {
    setSchedule(newSchedule);
  };

  const handleSettingsUpdate = (newSettings) => {
    console.log('üîÑ –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ WebSocket:', newSettings);
    setSettings(prev => {
      console.log('üìã –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', prev);
      
      // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è
      const updatedSettings = {
        ...prev,
        employees: newSettings.employees !== undefined ? newSettings.employees : prev.employees,
        shiftTypes: newSettings.shiftTypes !== undefined ? newSettings.shiftTypes : prev.shiftTypes,
        tags: newSettings.tags !== undefined ? newSettings.tags : prev.tags,
        // –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ - –µ—Å–ª–∏ –ø—Ä–∏—à–µ–ª undefined, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏—Ö
        admins: newSettings.admins !== undefined ? newSettings.admins : (prev.admins || []),
        websocket: newSettings.websocket !== undefined ? newSettings.websocket : prev.websocket,
        telegram: newSettings.telegram !== undefined ? newSettings.telegram : prev.telegram,
        debug: newSettings.debug !== undefined ? newSettings.debug : (prev.debug || false)
      };
      
      console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', updatedSettings);
      console.log('üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', updatedSettings.admins);
      
      // –ï—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
      if (newSettings.admins !== undefined && JSON.stringify(newSettings.admins) !== JSON.stringify(prev.admins || [])) {
        console.log('üîê –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –∏–∑-–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤');
        setIsAuthenticated(false);
      }
      
      return updatedSettings;
    });
  };

  const handleCellTagsUpdate = (newCellTags) => {
    setCellTags(newCellTags);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç –¥—Ä—É–≥–∏—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
  const handleAuthStateUpdate = (isAuthenticated, admins) => {
    console.log('üîÑ –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', { isAuthenticated, admins });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
    if (admins && admins.length > 0) {
      setSettings(prev => ({
        ...prev,
        admins: admins
      }));
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
      const newSettings = { ...settings, admins: admins };
      localStorage.setItem('schedule-planner-settings', JSON.stringify(newSettings));
      console.log('üíæ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    setIsAuthenticated(isAuthenticated);
    console.log('üîê –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', isAuthenticated);
  };

  const { connectionState, onlineUsers, publishScheduleUpdate, publishSettingsUpdate, publishCellTagsUpdate, publishAuthStateUpdate, sendTestMessage, sendPushNotification: sendWebSocketPushNotification } = 
    useAblyConnection(settings, schedule, cellTags, handleScheduleUpdate, handleSettingsUpdate, handleCellTagsUpdate, handleAuthStateUpdate);

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    console.log('üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
    console.log('üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:', settings);
    console.log('üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:', settings.admins);
    console.log('üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:', localStorage.getItem('schedule-planner-auth'));
    console.log('üåê WebSocket –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', settings.websocket);
    console.log('üîó –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', connectionState);
  }, []);

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  useEffect(() => {
    console.log('üîó –°–æ—Å—Ç–æ—è–Ω–∏–µ WebSocket –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:', connectionState);
  }, [connectionState]);

  // –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
  const generateDayLabels = (startDate, days) => {
    try {
      const labels = [];
      const start = new Date(startDate);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –≤–∞–ª–∏–¥–Ω–∞
      if (isNaN(start.getTime())) {
        console.error('‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞ –≤ generateDayLabels:', startDate);
        // Fallback –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
        const today = new Date();
        const dayOfWeek = today.getDay();
        const monday = new Date(today);
        monday.setDate(today.getDate() - (dayOfWeek === 0 ? 6 : dayOfWeek - 1));
        return generateDayLabels(monday.toISOString().split('T')[0], days);
      }
      
      const dayNames = ['–≤—Å', '–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±'];
      const monthNames = ['—è–Ω–≤', '—Ñ–µ–≤', '–º–∞—Ä', '–∞–ø—Ä', '–º–∞–π', '–∏—é–Ω', 
                         '–∏—é–ª', '–∞–≤–≥', '—Å–µ–Ω', '–æ–∫—Ç', '–Ω–æ—è', '–¥–µ–∫'];
      
      for (let i = 0; i < days; i++) {
        const currentDate = new Date(start);
        currentDate.setDate(start.getDate() + i);
        
        const dayName = dayNames[currentDate.getDay()];
        const dayNum = currentDate.getDate();
        const monthName = monthNames[currentDate.getMonth()];
        
        // –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ –Ω–æ–≤–æ–º –º–µ—Å—è—Ü–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Å—è—Ü
        if (i === 0 || currentDate.getDate() === 1) {
          labels.push(`${dayName} ${dayNum} ${monthName}`);
        } else {
          labels.push(`${dayName} ${dayNum}`);
        }
      }
      return labels;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ generateDayLabels:', error);
      // Fallback –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
      const today = new Date();
      const dayOfWeek = today.getDay();
      const monday = new Date(today);
      monday.setDate(today.getDate() - (dayOfWeek === 0 ? 6 : dayOfWeek - 1));
      return generateDayLabels(monday.toISOString().split('T')[0], days);
    }
  };

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ dayLabels –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
  const dynamicDayLabels = generateDayLabels(currentStartDate, viewPeriod);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –º–µ–∂–¥—É –∏–Ω–¥–µ–∫—Å–∞–º–∏ –∏ –¥–∞—Ç–∞–º–∏
  const getDateFromIndex = (dayIndex) => {
    try {
      const start = new Date(currentStartDate);
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –≤–∞–ª–∏–¥–Ω–∞
      if (isNaN(start.getTime())) {
        console.error('‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞ –≤ currentStartDate:', currentStartDate);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –∫–∞–∫ fallback
        const today = new Date();
        const targetDate = new Date(today);
        targetDate.setDate(today.getDate() + dayIndex);
        return targetDate.toISOString().split('T')[0];
      }
      
      const targetDate = new Date(start);
      targetDate.setDate(start.getDate() + dayIndex);
      return targetDate.toISOString().split('T')[0];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ getDateFromIndex:', error);
      // Fallback –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
      const today = new Date();
      const targetDate = new Date(today);
      targetDate.setDate(today.getDate() + dayIndex);
      return targetDate.toISOString().split('T')[0];
    }
  };

  const getDateKey = (empIndex, dayIndex) => {
    const dateStr = getDateFromIndex(dayIndex);
    return `${empIndex}-${dateStr}`;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –¥–∞—Ç–µ
  const getScheduleByDate = (empIndex, dayIndex) => {
    const dateKey = getDateKey(empIndex, dayIndex);
    return schedule[dateKey];
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –¥–∞—Ç–µ
  const setScheduleByDate = (empIndex, dayIndex, shiftType) => {
    const dateKey = getDateKey(empIndex, dayIndex);
    setSchedule(prev => {
      const newSchedule = { ...prev };
      if (shiftType === 'clear' || !shiftType) {
        delete newSchedule[dateKey];
      } else {
        newSchedule[dateKey] = shiftType;
      }
      publishScheduleUpdate(newSchedule);
      return newSchedule;
    });
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–≥–∞–º–∏ –ø–æ –¥–∞—Ç–∞–º
  const getCellTagsByDate = (empIndex, dayIndex) => {
    const dateKey = getDateKey(empIndex, dayIndex);
    return cellTags[dateKey] || [];
  };

  const setCellTagsByDate = (empIndex, dayIndex, tags) => {
    const dateKey = getDateKey(empIndex, dayIndex);
    setCellTags(prev => {
      const newCellTags = { ...prev };
      if (!tags || tags.length === 0) {
        delete newCellTags[dateKey];
      } else {
        newCellTags[dateKey] = tags;
      }
      publishCellTagsUpdate(newCellTags);
      return newCellTags;
    });
  };

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–∏–ø–æ–≤ —Å–º–µ–Ω
  useEffect(() => {
    injectShiftStyles(settings.shiftTypes);
  }, [settings.shiftTypes]);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (dropdownOpen && !event.target.closest('.dropdown')) {
        setDropdownOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [dropdownOpen]);

  const handleEmployeeChange = (index, value) => {
    const newEmployees = [...settings.employees];
    newEmployees[index] = value;
    const newSettings = { ...settings, employees: newEmployees };
    setSettings(newSettings);
    publishSettingsUpdate(newSettings);
  };

  const handleRemoveEmployee = (index) => {
    const newEmployees = settings.employees.filter((_, i) => i !== index);
    const newSettings = { ...settings, employees: newEmployees };
    setSettings(newSettings);
    publishSettingsUpdate(newSettings);
  };

  const handleAddEmployee = () => {
    const newSettings = { 
      ...settings, 
      employees: [...settings.employees, '–ù–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫'] 
    };
    setSettings(newSettings);
    publishSettingsUpdate(newSettings);
  };

  const handleShiftTypeChange = (key, field, value) => {
    const newShiftTypes = {
      ...settings.shiftTypes,
      [key]: { ...settings.shiftTypes[key], [field]: value }
    };
    
    if (field === 'start' || field === 'end' || field === 'startMinutes' || field === 'endMinutes') {
      const shiftType = newShiftTypes[key];
      if (shiftType.start !== null && shiftType.end !== null) {
        const startMinutes = shiftType.startMinutes || 0;
        const endMinutes = shiftType.endMinutes || 0;
        const startTime = `${shiftType.start.toString().padStart(2, '0')}:${startMinutes.toString().padStart(2, '0')}`;
        const endTime = `${shiftType.end.toString().padStart(2, '0')}:${endMinutes.toString().padStart(2, '0')}`;
        newShiftTypes[key].time = `${startTime}-${endTime}`;
      }
    }
    
    const newSettings = { ...settings, shiftTypes: newShiftTypes };
    setSettings(newSettings);
    publishSettingsUpdate(newSettings);
  };

  const handleRemoveShiftType = (key) => {
    const newShiftTypes = { ...settings.shiftTypes };
    delete newShiftTypes[key];
    const newSettings = { ...settings, shiftTypes: newShiftTypes };
    setSettings(newSettings);
    publishSettingsUpdate(newSettings);
  };

  const handleAddShiftType = () => {
    const newKey = `custom_${Date.now()}`;
    const newShiftType = {
      label: '–ù–æ–≤–∞—è —Å–º–µ–Ω–∞',
      shortLabel: '–ù',
      start: 9,
      startMinutes: 0,
      end: 17,
      endMinutes: 0,
      time: '9:00-17:00',
      color: '#4CAF50'
    };
    
    const newShiftTypes = {
      ...settings.shiftTypes,
      [newKey]: newShiftType
    };
    
    const newSettings = { ...settings, shiftTypes: newShiftTypes };
    setSettings(newSettings);
    publishSettingsUpdate(newSettings);
  };

  const handleShiftChange = (shiftType) => {
    let newSchedule;
    
    if (bulkEditMode && selectedCells.size > 0) {
      setSchedule(prev => {
        newSchedule = { ...prev };
        selectedCells.forEach(cellKey => {
          if (shiftType === 'clear') {
            delete newSchedule[cellKey];
          } else {
            newSchedule[cellKey] = shiftType;
          }
        });
        publishScheduleUpdate(newSchedule);
        return newSchedule;
      });
      setSelectedCells(new Set());
    } else {
      if (popup.empIndex === null || popup.dayIndex === null) return;
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Å –¥–∞—Ç–∞–º–∏
      setScheduleByDate(popup.empIndex, popup.dayIndex, shiftType);
    }
    
    setPopup({ open: false, empIndex: null, dayIndex: null });
  };

  const handleCellClick = (empIndex, dayIndex) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if (!checkAuthentication()) {
      alert('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ. –í–æ–π–¥–∏—Ç–µ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.');
      return;
    }

    if (bulkEditMode) {
      const dateKey = getDateKey(empIndex, dayIndex);
      setSelectedCells(prev => {
        const newSet = new Set(prev);
        if (newSet.has(dateKey)) {
          newSet.delete(dateKey);
        } else {
          newSet.add(dateKey);
        }
        return newSet;
      });
    } else {
      const currentTags = getCellTagsByDate(empIndex, dayIndex);
      setPopup({ open: true, empIndex, dayIndex, selectedTags: currentTags });
    }
  };

  const handleCellRightClick = (event) => {
    if (bulkEditMode && selectedCells.size > 0) {
      event.preventDefault();
      // –ù–∞–π–¥–µ–º –æ–±—â–∏–µ —Ç–µ–≥–∏ –¥–ª—è –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —è—á–µ–µ–∫
      const selectedCellsArray = Array.from(selectedCells);
      const commonTags = selectedCellsArray.length > 0 ? 
        (cellTags[selectedCellsArray[0]] || []).filter(tag => 
          selectedCellsArray.every(cellKey => (cellTags[cellKey] || []).includes(tag))
        ) : [];
      
      setPopup({ open: true, empIndex: null, dayIndex: null, selectedTags: commonTags });
    }
  };

  const handleDateClick = (dayIndex) => {
    setSelectedDay(dayIndex);
    setCurrentView('gantt');
  };

  const toggleFilter = (filterType) => {
    setFilters(prev => ({
      ...prev,
      [filterType]: !prev[filterType]
    }));
  };

  const shouldShowEmployee = (empIndex) => {
    for (let day = 0; day < viewPeriod; day++) {
      const shiftType = getScheduleByDate(empIndex, day);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ (undefined –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)
      if ((!shiftType || shiftType === '') && filters.empty) return true;
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—ã
      if (shiftType && shiftType !== '' && filters[shiftType]) return true;
    }
    return false;
  };

  const toggleBulkEdit = () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if (!checkAuthentication()) {
      alert('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ. –í–æ–π–¥–∏—Ç–µ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.');
      return;
    }

    setBulkEditMode(!bulkEditMode);
    setSelectedCells(new Set());
  };

  const exportData = () => {
    const data = {
      schedule,
      filters,
      currentView,
      selectedDay,
      exportDate: new Date().toISOString(),
      version: '1.0'
    };
    
    const dataStr = JSON.stringify(data, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);
    
    const link = document.createElement('a');
    link.href = url;
    link.download = `schedule-planner-${new Date().toISOString().split('T')[0]}.json`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  const importData = (event) => {
    const file = event.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        const data = JSON.parse(e.target.result);
        
        if (data.schedule) {
          setSchedule(data.schedule);
          publishScheduleUpdate(data.schedule);
        }
        if (data.filters) setFilters(data.filters);
        if (data.currentView) setCurrentView(data.currentView);
        if (data.selectedDay !== undefined) setSelectedDay(data.selectedDay);
        
        alert('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!');
      } catch (error) {
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.');
        console.error('Import error:', error);
      }
    };
    reader.readAsText(file);
    event.target.value = '';
  };

  // –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
  const handleAdminChange = (index, field, value) => {
    const currentAdmins = settings.admins || [];
    console.log('üîß –ò–∑–º–µ–Ω—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', { index, field, value, currentAdmins });
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å –¥–∞–Ω–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (index >= currentAdmins.length) {
      console.error('‚ùå –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', index);
      return;
    }
    
    const newAdmins = [...currentAdmins];
    newAdmins[index] = { ...newAdmins[index], [field]: value };
    const newSettings = { ...settings, admins: newAdmins };
    console.log('üì¶ –ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –∞–¥–º–∏–Ω–∞–º–∏:', newSettings);
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    localStorage.setItem('schedule-planner-settings', JSON.stringify(newSettings));
    console.log('üíæ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ localStorage');
    
    setSettings(newSettings);
    publishSettingsUpdate(newSettings);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –¥—Ä—É–≥–∏–µ –±—Ä–∞—É–∑–µ—Ä—ã
    publishAuthStateUpdate(isAuthenticated, newAdmins);
    console.log('üì° –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤ –¥—Ä—É–≥–∏–µ –±—Ä–∞—É–∑–µ—Ä—ã');
  };

  const handleRemoveAdmin = (index) => {
    const newAdmins = settings.admins.filter((_, i) => i !== index);
    const newSettings = { ...settings, admins: newAdmins };
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    localStorage.setItem('schedule-planner-settings', JSON.stringify(newSettings));
    console.log('üíæ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ localStorage');
    
    setSettings(newSettings);
    publishSettingsUpdate(newSettings);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –¥—Ä—É–≥–∏–µ –±—Ä–∞—É–∑–µ—Ä—ã
    publishAuthStateUpdate(isAuthenticated, newAdmins);
    console.log('üì° –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤ –¥—Ä—É–≥–∏–µ –±—Ä–∞—É–∑–µ—Ä—ã');
  };

  const handleAddAdmin = () => {
    const newAdmin = {
      name: '–ù–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      password: ''
    };
    const currentAdmins = settings.admins || [];
    const newAdmins = [...currentAdmins, newAdmin];
    const newSettings = { ...settings, admins: newAdmins };
    console.log('üîß –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', newAdmin);
    console.log('üì¶ –ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', newSettings);
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    localStorage.setItem('schedule-planner-settings', JSON.stringify(newSettings));
    console.log('üíæ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ localStorage');
    
    setSettings(newSettings);
    publishSettingsUpdate(newSettings);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –¥—Ä—É–≥–∏–µ –±—Ä–∞—É–∑–µ—Ä—ã
    publishAuthStateUpdate(isAuthenticated, newAdmins);
    console.log('üì° –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤ –¥—Ä—É–≥–∏–µ –±—Ä–∞—É–∑–µ—Ä—ã');
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const checkAuthentication = () => {
    // –ï—Å–ª–∏ –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–º
    if (!settings.admins || settings.admins.length === 0) {
      return true;
    }
    return isAuthenticated;
  };

  // –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const handleUnlock = () => {
    if (!settings.admins || settings.admins.length === 0) {
      setIsAuthenticated(true);
      return;
    }
    setAuthModal(true);
  };

  // –§—É–Ω–∫—Ü–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const handleLock = () => {
    setIsAuthenticated(false);
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ –¥—Ä—É–≥–∏–µ –±—Ä–∞—É–∑–µ—Ä—ã
    publishAuthStateUpdate(false, settings.admins || []);
    console.log('üîí –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ –¥—Ä—É–≥–∏–µ –±—Ä–∞—É–∑–µ—Ä—ã');
  };

  const clearAllData = () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if (!checkAuthentication()) {
      alert('–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞. –í–æ–π–¥–∏—Ç–µ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.');
      return;
    }

    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
      const emptySchedule = {};
      const emptyCellTags = {};
      
      setSchedule(emptySchedule);
      setCellTags(emptyCellTags);
      publishScheduleUpdate(emptySchedule);
      publishCellTagsUpdate(emptyCellTags);
      
      setFilters(defaultFilters);
      setCurrentView('grid');
      setSelectedDay(null);
      setBulkEditMode(false);
      setSelectedCells(new Set());
      
      alert('–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã!');
    }
  };

  const handleSettingsChange = (path, value) => {
    const pathArray = path.split('.');
    setSettings(prev => {
      const newSettings = { ...prev };
      let current = newSettings;
      
      for (let i = 0; i < pathArray.length - 1; i++) {
        current[pathArray[i]] = { ...current[pathArray[i]] };
        current = current[pathArray[i]];
      }
      
      current[pathArray[pathArray.length - 1]] = value;
      return newSettings;
    });
  };

  // –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–∞–º–∏
  const handleTagChange = (key, field, value) => {
    const updatedTag = { ...settings.tags[key], [field]: value };
    
    // –ï—Å–ª–∏ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ (label), –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª (shortLabel)
    if (field === 'label') {
      updatedTag.shortLabel = value;
    }
    
    const newTags = {
      ...settings.tags,
      [key]: updatedTag
    };
    const newSettings = { ...settings, tags: newTags };
    setSettings(newSettings);
    publishSettingsUpdate(newSettings);
  };

  const handleRemoveTag = (key) => {
    const newTags = { ...settings.tags };
    delete newTags[key];
    const newSettings = { ...settings, tags: newTags };
    setSettings(newSettings);
    publishSettingsUpdate(newSettings);
  };

  const handleAddTag = () => {
    const newKey = `tag_${Date.now()}`;
    const newTag = {
      label: '–ù–æ–≤—ã–π —Ç–µ–≥',
      shortLabel: '–ù–æ–≤—ã–π —Ç–µ–≥',
      color: '#4CAF50'
    };
    
    const newTags = {
      ...settings.tags,
      [newKey]: newTag
    };
    
    const newSettings = { ...settings, tags: newTags };
    setSettings(newSettings);
    publishSettingsUpdate(newSettings);
  };

  const handleTagToggle = (tagKey) => {
    setPopup(prev => {
      const newSelectedTags = prev.selectedTags.includes(tagKey)
        ? prev.selectedTags.filter(t => t !== tagKey)
        : [...prev.selectedTags, tagKey];
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–≥–∏ —è—á–µ–π–∫–∏ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
      if (prev.empIndex !== null && prev.dayIndex !== null) {
        setCellTagsByDate(prev.empIndex, prev.dayIndex, newSelectedTags);
      }
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–≥–∏ –¥–ª—è –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —è—á–µ–µ–∫ –≤ bulk —Ä–µ–∂–∏–º–µ  
      else if (bulkEditMode && selectedCells.size > 0) {
        setCellTags(prevCellTags => {
          const newCellTags = { ...prevCellTags };
          const isAdding = !prev.selectedTags.includes(tagKey);
          
          selectedCells.forEach(cellKey => {
            const currentCellTags = newCellTags[cellKey] || [];
            if (isAdding) {
              // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
              if (!currentCellTags.includes(tagKey)) {
                newCellTags[cellKey] = [...currentCellTags, tagKey];
              }
            } else {
              // –£–¥–∞–ª—è–µ–º —Ç–µ–≥
              newCellTags[cellKey] = currentCellTags.filter(t => t !== tagKey);
            }
          });
          
          publishCellTagsUpdate(newCellTags);
          return newCellTags;
        });
      }
      
      return {
        ...prev,
        selectedTags: newSelectedTags
      };
    });
  };

  const handleCellTagsChange = (cellKey, newTags) => {
    setCellTags(prev => {
      const newCellTags = {
        ...prev,
        [cellKey]: newTags
      };
      publishCellTagsUpdate(newCellTags);
      return newCellTags;
    });
  };

  const handleTagClick = (empIndex, dayIndex) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if (!checkAuthentication()) {
      alert('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ. –í–æ–π–¥–∏—Ç–µ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.');
      return;
    }

    const currentTags = getCellTagsByDate(empIndex, dayIndex);
    setPopup({ open: true, empIndex, dayIndex, selectedTags: currentTags });
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const sendPushNotification = (title, message) => {
    if ('Notification' in window) {
      if (Notification.permission === 'granted') {
        new Notification(title, {
          body: message,
          icon: '/icon.svg',
          tag: 'schedule-update',
          badge: '/icon32.png'
        });
      } else if (Notification.permission !== 'denied') {
        Notification.requestPermission().then(permission => {
          if (permission === 'granted') {
            new Notification(title, {
              body: message,
              icon: '/icon.svg',
              tag: 'schedule-update',
              badge: '/icon32.png'
            });
          }
        });
      }
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
  const generateSchedulePDF = async () => {
    try {
      console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é PDF...');
      
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è PDF
      const scheduleElement = document.querySelector('.schedule-grid');
      if (!scheduleElement) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
      }

      // –°–æ–∑–¥–∞–µ–º –∫–ª–æ–Ω —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–¥ PDF
      const clonedElement = scheduleElement.cloneNode(true);
      
      // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è PDF
      clonedElement.style.cssText = `
        width: 100%;
        background: white;
        border: 1px solid #ddd;
        border-radius: 0;
        box-shadow: none;
        font-family: Arial, sans-serif;
        font-size: 12px;
      `;

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
      const currentDate = new Date();
      const firstDay = dynamicDayLabels[0] || '–ø–Ω';
      const lastDay = dynamicDayLabels[dynamicDayLabels.length - 1] || '–≤—Å';
      
      const titleElement = document.createElement('div');
      titleElement.style.cssText = `
        font-size: 20px;
        font-weight: bold;
        text-align: center;
        margin-bottom: 15px;
        color: #333;
        font-family: Arial, sans-serif;
        border-bottom: 2px solid #667eea;
        padding-bottom: 10px;
      `;
      titleElement.innerHTML = `
        üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–º–µ–Ω<br>
        <span style="font-size: 16px; color: #667eea; font-weight: 600;">
          ${firstDay} ‚Äî ${lastDay}
        </span><br>
        <small style="font-size: 12px; color: #666;">
          –°–æ–∑–¥–∞–Ω–æ: ${currentDate.toLocaleDateString('ru-RU')} –≤ ${currentDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}
        </small>
      `;

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö
      const statsElement = document.createElement('div');
      statsElement.style.cssText = `
        font-size: 12px;
        color: #666;
        margin-bottom: 15px;
        text-align: center;
        font-family: Arial, sans-serif;
      `;
      const totalEmployees = settings.employees.length;
      const employeesWithSchedule = settings.employees.filter((_, index) => 
        Object.keys(schedule).some(key => key.startsWith(`${index}-`))
      ).length;
      statsElement.textContent = `–í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${totalEmployees} | –° —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º: ${employeesWithSchedule}`;

      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è PDF
      const pdfContainer = document.createElement('div');
      pdfContainer.style.cssText = `
        position: absolute;
        top: -10000px;
        left: -10000px;
        width: 1200px;
        background: white;
        padding: 20px;
        font-family: Arial, sans-serif;
      `;
      
      pdfContainer.appendChild(titleElement);
      pdfContainer.appendChild(statsElement);
      pdfContainer.appendChild(clonedElement);
      document.body.appendChild(pdfContainer);

      console.log('üì∏ –°–æ–∑–¥–∞–µ–º —Å–Ω–∏–º–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...');

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ HTML —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
      const canvas = await html2canvas(pdfContainer, {
        scale: 1.5, // –°–Ω–∏–∂–∞–µ–º scale –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        useCORS: true,
        backgroundColor: '#ffffff',
        width: 1240,
        height: Math.max(600, pdfContainer.scrollHeight + 40),
        logging: false, // –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        allowTaint: true
      });

      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
      document.body.removeChild(pdfContainer);

      console.log('üìÑ –°–æ–∑–¥–∞–µ–º PDF –¥–æ–∫—É–º–µ–Ω—Ç...');

      // –°–æ–∑–¥–∞–µ–º PDF
      const pdf = new jsPDF('l', 'mm', 'a4'); // landscape orientation
      
      const imgData = canvas.toDataURL('image/jpeg', 0.85); // –ò—Å–ø–æ–ª—å–∑—É–µ–º JPEG —Å –∫–∞—á–µ—Å—Ç–≤–æ–º 85% –¥–ª—è –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
      const imgWidth = 290; // A4 landscape width minus margins
      const imgHeight = (canvas.height * imgWidth) / canvas.width;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Ä–∞–∑–±–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü
      const pageHeight = 200; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      
      if (imgHeight <= pageHeight) {
        // –ü–æ–º–µ—â–∞–µ—Ç—Å—è –Ω–∞ –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É
        pdf.addImage(imgData, 'JPEG', 10, 10, imgWidth, imgHeight);
      } else {
        // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        let yPosition = 0;
        const sourceHeight = canvas.height;
        const pageHeightInPixels = (pageHeight * canvas.width) / imgWidth;
        
        while (yPosition < sourceHeight) {
          const remainingHeight = sourceHeight - yPosition;
          const currentPageHeight = Math.min(pageHeightInPixels, remainingHeight);
          const currentPageHeightMM = (currentPageHeight * imgWidth) / canvas.width;
          
          if (yPosition > 0) {
            pdf.addPage();
          }
          
          pdf.addImage(
            imgData, 
            'JPEG', 
            10, 
            10, 
            imgWidth, 
            currentPageHeightMM,
            undefined,
            'FAST',
            0,
            -yPosition * imgWidth / canvas.width
          );
          
          yPosition += currentPageHeight;
        }
      }
      
      console.log('‚úÖ PDF —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º PDF –∫–∞–∫ blob –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      return pdf.output('blob');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF:', error);
      throw error;
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF –≤ Telegram
  const sendPDFToTelegram = async (pdfBlob) => {
    if (!settings.telegram?.enabled || !settings.telegram?.botToken || !settings.telegram?.chatId) {
      return false;
    }

    try {
      const formData = new FormData();
      const fileName = `schedule-${new Date().toISOString().split('T')[0]}.pdf`;
      const currentDate = new Date().toLocaleDateString('ru-RU');
      const currentTime = new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
      
      formData.append('chat_id', settings.telegram.chatId);
      formData.append('document', pdfBlob, fileName);
      formData.append('caption', `üìä <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–º–µ–Ω</b>\nüìÖ –î–∞—Ç–∞: ${currentDate}\nüïê –í—Ä–µ–º—è: ${currentTime}`);
      formData.append('parse_mode', 'HTML');
      formData.append('disable_content_type_detection', 'false'); // –ü–æ–∑–≤–æ–ª—è–µ—Ç Telegram –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–µ–≤—å—é

      const url = `https://api.telegram.org/bot${settings.telegram.botToken}/sendDocument`;
      const response = await fetch(url, {
        method: 'POST',
        body: formData
      });

      const result = await response.json();
      
      if (result.ok) {
        console.log('‚úÖ PDF —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram —Å –ø—Ä–µ–≤—å—é');
        return true;
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF –≤ Telegram:', result);
        return false;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF –≤ Telegram:', error);
      return false;
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
  const sendTelegramMessage = async (message) => {
    if (!settings.telegram?.enabled || !settings.telegram?.botToken || !settings.telegram?.chatId) {
      return false;
    }

    try {
      const url = `https://api.telegram.org/bot${settings.telegram.botToken}/sendMessage`;
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: settings.telegram.chatId,
          text: message,
          parse_mode: 'HTML'
        })
      });

      const result = await response.json();
      
      if (result.ok) {
        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
        return true;
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', result);
        return false;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:', error);
      return false;
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å"
  const handlePublish = async () => {
    try {
      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
      publishScheduleUpdate(schedule);
      publishCellTagsUpdate(cellTags);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket –∏ –ª–æ–∫–∞–ª—å–Ω–æ
      const notificationTitle = '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!';
      const notificationMessage = '–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≥—Ä–∞—Ñ–∏–∫–µ —Ä–∞–±–æ—Ç—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã.';
      
      // –õ–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      sendPushNotification(notificationTitle, notificationMessage);
      
      // WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      if (settings.websocket.enabled && connectionState === 'connected') {
        sendWebSocketPushNotification(notificationTitle, notificationMessage);
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ PDF –≤ Telegram
      if (settings.telegram?.enabled) {
        console.log('üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram...');
        
        // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF (–±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–±)
        let pdfSent = false;
        try {
          const pdfBlob = await generateSchedulePDF();
          pdfSent = await sendPDFToTelegram(pdfBlob);
        } catch (pdfError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–∏ PDF:', pdfError);
        }
        
        // –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        let messageSent = true; // PDF —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        
        if (pdfSent) {
          console.log('‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
          alert('‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!\nüìä PDF —Å –ø—Ä–µ–≤—å—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram.');
        } else {
          console.log('‚ö†Ô∏è –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏');
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ö–æ—Ç—è –±—ã —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
          const currentDate = new Date().toLocaleDateString('ru-RU');
          const currentTime = new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
          const fallbackMessage = `üì¢ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</b>\n\n` +
                                 `–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≥—Ä–∞—Ñ–∏–∫–µ —Ä–∞–±–æ—Ç—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã.\n` +
                                 `üìÖ ${currentDate} –≤ ${currentTime}\n\n` +
                                 `‚ö†Ô∏è PDF –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.`;
          
          messageSent = await sendTelegramMessage(fallbackMessage);
          
          if (messageSent) {
            alert('‚ö†Ô∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!\n–¢–µ–∫—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –Ω–æ PDF –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å.');
          } else {
            alert('‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ!\n–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.');
          }
        }
      } else {
        console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        alert('‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!');
      }
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF
  const downloadPDF = async () => {
    try {
      const pdfBlob = await generateSchedulePDF();
      const url = URL.createObjectURL(pdfBlob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `schedule-${new Date().toISOString().split('T')[0]}.pdf`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ PDF:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  };

  return (
    <div className="container">
      <Header 
        currentView={currentView}
        selectedDay={selectedDay}
        bulkEditMode={bulkEditMode}
        dropdownOpen={dropdownOpen}
        connectionState={connectionState}
        onlineUsers={onlineUsers}
        websocketEnabled={settings.websocket.enabled}
        onViewSwitch={setCurrentView}
        onBulkEditToggle={toggleBulkEdit}
        onSettingsOpen={() => {
          if (!checkAuthentication()) {
            alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –í–æ–π–¥–∏—Ç–µ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.');
            return;
          }
          setSettingsModal(true);
        }}
        onExportData={exportData}
        onImportData={importData}
        onClearAllData={clearAllData}
        onDropdownToggle={() => setDropdownOpen(!dropdownOpen)}
        onPublish={handlePublish}
        onDownloadPDF={downloadPDF}
        onUnlock={handleUnlock}
        onLock={handleLock}
        isAuthenticated={checkAuthentication()}
        hasAdmins={settings.admins && settings.admins.length > 0}
      />
      
      <div className="content">
        <CalendarNavigation 
          currentStartDate={currentStartDate}
          viewPeriod={viewPeriod}
          onStartDateChange={setCurrentStartDate}
          dynamicDayLabels={dynamicDayLabels}
        />
        
        <Legend 
          shiftTypes={settings.shiftTypes}
          filters={filters}
          onFilterToggle={toggleFilter}
        />

        {currentView === 'grid' && (
          <GridView 
            employees={settings.employees}
            schedule={schedule}
            shiftTypes={settings.shiftTypes}
            selectedCells={selectedCells}
            bulkEditMode={bulkEditMode}
            cellTags={cellTags}
            tags={settings.tags}
            dayLabels={dynamicDayLabels}
            viewPeriod={viewPeriod}
            getScheduleByDate={getScheduleByDate}
            getCellTagsByDate={getCellTagsByDate}
            getDateKey={getDateKey}
            onCellClick={handleCellClick}
            onCellRightClick={handleCellRightClick}
            onDateClick={handleDateClick}
            shouldShowEmployee={shouldShowEmployee}
          />
        )}

        {currentView === 'timeline' && (
          <TimelineView 
            employees={settings.employees}
            schedule={schedule}
            shiftTypes={settings.shiftTypes}
            selectedCells={selectedCells}
            bulkEditMode={bulkEditMode}
            cellTags={cellTags}
            tags={settings.tags}
            dayLabels={dynamicDayLabels}
            viewPeriod={viewPeriod}
            getScheduleByDate={getScheduleByDate}
            getCellTagsByDate={getCellTagsByDate}
            getDateKey={getDateKey}
            onCellClick={handleCellClick}
            onCellRightClick={handleCellRightClick}
            shouldShowEmployee={shouldShowEmployee}
          />
        )}

        {currentView === 'gantt' && selectedDay !== null && (
          <GanttView 
            employees={settings.employees}
            schedule={schedule}
            shiftTypes={settings.shiftTypes}
            selectedDay={selectedDay}
            cellTags={cellTags}
            tags={settings.tags}
            dayLabels={dynamicDayLabels}
            getScheduleByDate={getScheduleByDate}
            getCellTagsByDate={getCellTagsByDate}
            onBackToGrid={() => setCurrentView('grid')}
            onDaySelect={setSelectedDay}
            onTagClick={handleTagClick}
            shouldShowEmployee={shouldShowEmployee}
          />
        )}

        <ShiftAndTagPopup 
          isOpen={popup.open}
          shiftTypes={settings.shiftTypes}
          availableTags={settings.tags}
          selectedTags={popup.selectedTags}
          selectedCells={selectedCells}
          bulkEditMode={bulkEditMode}
          onShiftChange={handleShiftChange}
          onTagToggle={handleTagToggle}
          onClose={() => setPopup({ open: false, empIndex: null, dayIndex: null, selectedTags: [] })}
        />

        <SettingsModal 
          isOpen={settingsModal}
          settings={settings}
          connectionState={connectionState}
          onClose={() => setSettingsModal(false)}
          onEmployeeChange={handleEmployeeChange}
          onRemoveEmployee={handleRemoveEmployee}
          onAddEmployee={handleAddEmployee}
          onShiftTypeChange={handleShiftTypeChange}
          onRemoveShiftType={handleRemoveShiftType}
          onAddShiftType={handleAddShiftType}
          onTagChange={handleTagChange}
          onRemoveTag={handleRemoveTag}
          onAddTag={handleAddTag}
          onSettingsChange={handleSettingsChange}
          onSendTestMessage={sendTestMessage}
          onAdminChange={handleAdminChange}
          onRemoveAdmin={handleRemoveAdmin}
          onAddAdmin={handleAddAdmin}
        />

        <AuthModal 
          isOpen={authModal}
          admins={settings.admins || []}
          onClose={() => setAuthModal(false)}
          onSuccess={() => setIsAuthenticated(true)}
        />
      </div>
    </div>
  );
}

export default App;