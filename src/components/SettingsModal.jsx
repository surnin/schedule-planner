import React, { useState } from 'react';
import TimeSelect from './TimeSelect';
import ColorPicker from './ColorPicker';

const SettingsModal = ({ 
  isOpen,
  settings,
  connectionState,
  onClose,
  onEmployeeChange,
  onRemoveEmployee,
  onAddEmployee,
  onShiftTypeChange,
  onRemoveShiftType,
  onAddShiftType,
  onTagChange,
  onRemoveTag,
  onAddTag,
  onSettingsChange,
  onSendTestMessage
}) => {
  const [activeTab, setActiveTab] = useState('employees');

  if (!isOpen) return null;

  return (
    <div className="settings-overlay" onClick={onClose}>
      <div className="settings-modal" onClick={(e) => e.stopPropagation()}>
        <div className="settings-header">
          <h2>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</h2>
          <button className="close-btn" onClick={onClose}>√ó</button>
        </div>
        
        <div className="settings-tabs">
          <button 
            className={`tab-btn ${activeTab === 'employees' ? 'active' : ''}`}
            onClick={() => setActiveTab('employees')}
          >
            –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
          </button>
          <button 
            className={`tab-btn ${activeTab === 'shifts' ? 'active' : ''}`}
            onClick={() => setActiveTab('shifts')}
          >
            –¢–∏–ø—ã —Å–º–µ–Ω
          </button>
          <button 
            className={`tab-btn ${activeTab === 'tags' ? 'active' : ''}`}
            onClick={() => setActiveTab('tags')}
          >
            –¢–µ–≥–∏
          </button>
          <button 
            className={`tab-btn ${activeTab === 'sync' ? 'active' : ''}`}
            onClick={() => setActiveTab('sync')}
          >
            –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
          </button>
          <button 
            className={`tab-btn ${activeTab === 'debug' ? 'active' : ''}`}
            onClick={() => setActiveTab('debug')}
          >
            –û—Ç–ª–∞–¥–∫–∞
          </button>
        </div>
        
        <div className="settings-content">
          {activeTab === 'employees' && (
            <div className="settings-section">
              <h3>–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏</h3>
              <button 
                className="add-btn"
                onClick={onAddEmployee}
              >
                + –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
              </button>
              <div className="employees-list">
                {settings.employees.map((employee, index) => (
                  <div key={index} className="employee-item">
                    <input 
                      type="text" 
                      value={employee}
                      onChange={(e) => onEmployeeChange(index, e.target.value)}
                    />
                    <button 
                      className="remove-btn"
                      onClick={() => onRemoveEmployee(index)}
                    >
                      üóëÔ∏è
                    </button>
                  </div>
                ))}
              </div>
            </div>
          )}

          {activeTab === 'shifts' && (
            <div className="settings-section">
              <h3>–¢–∏–ø—ã —Å–º–µ–Ω</h3>
              <button 
                className="add-btn"
                onClick={onAddShiftType}
              >
                + –î–æ–±–∞–≤–∏—Ç—å —Ç–∏–ø —Å–º–µ–Ω—ã
              </button>
              <div className="shift-types-list">
                {Object.entries(settings.shiftTypes).map(([key, shiftType]) => (
                  <div key={key} className="shift-type-item">
                    <div className="shift-type-inputs">
                      <input 
                        type="text" 
                        placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ"
                        value={shiftType.label}
                        onChange={(e) => onShiftTypeChange(key, 'label', e.target.value)}
                      />
                      <input 
                        type="text" 
                        placeholder="–ö—Ä–∞—Ç–∫–æ–µ"
                        value={shiftType.shortLabel}
                        maxLength={2}
                        onChange={(e) => onShiftTypeChange(key, 'shortLabel', e.target.value)}
                      />
                      <ColorPicker
                        value={shiftType.color}
                        onChange={(color) => onShiftTypeChange(key, 'color', color)}
                        label="–¶–≤–µ—Ç"
                      />
                      {shiftType.start !== null && (
                        <>
                          <TimeSelect
                            value={{ hours: shiftType.start, minutes: shiftType.startMinutes || 0 }}
                            placeholder="–ù–∞—á–∞–ª–æ"
                            onChange={(time) => {
                              onShiftTypeChange(key, 'start', time.hours);
                              onShiftTypeChange(key, 'startMinutes', time.minutes);
                            }}
                          />
                          <TimeSelect
                            value={{ hours: shiftType.end, minutes: shiftType.endMinutes || 0 }}
                            placeholder="–ö–æ–Ω–µ—Ü"
                            onChange={(time) => {
                              onShiftTypeChange(key, 'end', time.hours);
                              onShiftTypeChange(key, 'endMinutes', time.minutes);
                            }}
                          />
                        </>
                      )}
                    </div>
                    <button 
                      className="remove-btn"
                      onClick={() => onRemoveShiftType(key)}
                    >
                      üóëÔ∏è
                    </button>
                  </div>
                ))}
              </div>
            </div>
          )}

          {activeTab === 'tags' && (
            <div className="settings-section">
              <h3>–¢–µ–≥–∏</h3>
              <button 
                className="add-btn"
                onClick={onAddTag}
              >
                + –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥
              </button>
              <div className="tags-list">
                {Object.entries(settings.tags || {}).map(([key, tag]) => (
                  <div key={key} className="tag-item">
                    <div className="tag-inputs">
                      <input 
                        type="text" 
                        placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ"
                        value={tag.label}
                        maxLength={10}
                        onChange={(e) => onTagChange(key, 'label', e.target.value)}
                      />
                      <input 
                        type="text" 
                        placeholder="–°–∏–º–≤–æ–ª"
                        value={tag.shortLabel}
                        maxLength={1}
                        onChange={(e) => onTagChange(key, 'shortLabel', e.target.value)}
                      />
                      <ColorPicker
                        value={tag.color}
                        onChange={(color) => onTagChange(key, 'color', color)}
                        label="–¶–≤–µ—Ç"
                      />
                    </div>
                    <button 
                      className="remove-btn"
                      onClick={() => onRemoveTag(key)}
                    >
                      üóëÔ∏è
                    </button>
                  </div>
                ))}
              </div>
            </div>
          )}

          {activeTab === 'sync' && (
            <div className="settings-section">
              <h3>Ably Real-time Sync</h3>
              <div className="websocket-settings">
                <div className="ably-info">
                  <p><strong>üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:</strong></p>
                  <ol>
                    <li>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ <a href="https://ably.com" target="_blank" rel="noopener noreferrer">ably.com</a> (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)</li>
                    <li>–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</li>
                    <li>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ API –∫–ª—é—á –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "API Keys"</li>
                    <li>–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∏–∂–µ –∏ –≤–∫–ª—é—á–∏—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é</li>
                  </ol>
                </div>
                
                <label>
                  <input 
                    type="checkbox"
                    checked={settings.websocket.enabled}
                    onChange={(e) => onSettingsChange('websocket.enabled', e.target.checked)}
                  />
                  –í–∫–ª—é—á–∏—Ç—å real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
                </label>
                
                <input 
                  type="password"
                  placeholder="Ably API Key (–Ω–∞–ø—Ä–∏–º–µ—Ä: abc123.def456:xyz789)"
                  value={settings.websocket.apiKey}
                  onChange={(e) => onSettingsChange('websocket.apiKey', e.target.value)}
                  disabled={!settings.websocket.enabled}
                />
                
                <input 
                  type="text"
                  placeholder="Room ID (–Ω–∞–ø—Ä–∏–º–µ—Ä: simple-scheduler-mv)"
                  value={settings.websocket.roomId}
                  onChange={(e) => onSettingsChange('websocket.roomId', e.target.value)}
                  disabled={!settings.websocket.enabled}
                />
                
                {connectionState === 'connected' && (
                  <div className="ably-status success">
                    ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ! –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                  </div>
                )}
                
                {connectionState === 'failed' && (
                  <div className="ably-status error">
                    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                  </div>
                )}
                
                {connectionState === 'connected' && (
                  <button 
                    className="btn btn-primary"
                    onClick={onSendTestMessage}
                    style={{ marginTop: '10px' }}
                  >
                    üß™ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                  </button>
                )}
              </div>
            </div>
          )}

          {activeTab === 'debug' && (
            <div className="settings-section">
              <h3>–û—Ç–ª–∞–¥–∫–∞</h3>
              <div className="debug-settings">
                <label>
                  <input 
                    type="checkbox"
                    checked={settings.debug}
                    onChange={(e) => onSettingsChange('debug', e.target.checked)}
                  />
                  –í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ (–ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏)
                </label>
                
                {settings.debug && (
                  <div className="debug-info">
                    <p>üêõ <strong>–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω</strong></p>
                    <p>–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ (F12 ‚Üí Console)</p>
                  </div>
                )}
              </div>
            </div>
          )}
        </div>
        
        <div className="settings-footer">
          <button className="btn btn-cancel" onClick={onClose}>
            –û—Ç–º–µ–Ω–∞
          </button>
          <button className="btn btn-primary" onClick={onClose}>
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
          </button>
        </div>
      </div>
    </div>
  );
};

export default SettingsModal;