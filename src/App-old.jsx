import React, { useState, useEffect, useRef } from 'react'
import * as Ably from 'ably'
import './App.css'

/*
  –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø REAL-TIME –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –° ABLY
  
  ABLY –ë–ï–°–ü–õ–ê–¢–ù–´–ô –¢–ê–†–ò–§ 2024:
  - 200 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π (–æ—Ç–ª–∏—á–Ω–æ –¥–ª—è –∫–æ–º–∞–Ω–¥)
  - 6 –º–ª–Ω —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–µ—Å—è—Ü  
  - 200 –∫–∞–Ω–∞–ª–æ–≤
  - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Chrome Extensions (Manifest v3)
  - 99.999% SLA –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å
  
  –ù–ê–°–¢–†–û–ô–ö–ê –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
  1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ ably.com (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)
  2. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  3. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–ª—é—á–∞
  4. –í–≤–æ–¥ API –∫–ª—é—á–∞ –∏ Room ID –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
  
  –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
  - Real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
  - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  - –ü–æ–∫–∞–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (presence)
  - –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π (1 –¥–µ–Ω—å –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Ç–∞—Ä–∏—Ñ–µ)
*/

const defaultEmployees = [
  '–ò–ª—å–≤–∏–Ω–∞', '–ò–Ω–µ—Å—Å–∞', '–ê–ª—å–±–∏–Ω–∞', '–ê–Ω–∞—Å—Ç–∞—Å–∏—è', '–ê—Ä–∏–Ω–∞',
  '–ö—Å–µ–Ω–∏—è', '–°–≤–µ—Ç–∞', '–ï–ª–µ–Ω–∞', '–õ–µ—Å—è', '–ê–ª–∏—è', '–î–∞—à–∞'
];

const defaultShiftTypes = {
  morning: { label: '–£—Ç—Ä–æ', time: '8:00-16:00', shortLabel: '–£', start: 8, end: 16 },
  day: { label: '–î–µ–Ω—å', time: '10:00-18:00', shortLabel: '–î', start: 10, end: 18 },
  evening: { label: '–í–µ—á–µ—Ä', time: '16:00-00:00', shortLabel: '–í', start: 16, end: 24 },
  night: { label: '–ù–æ—á—å', time: '00:00-08:00', shortLabel: '–ù', start: 0, end: 8 },
  off: { label: '–í—ã—Ö–æ–¥–Ω–æ–π', time: '', shortLabel: '–í', start: null, end: null },
  vacation: { label: '–û—Ç–ø—É—Å–∫', time: '', shortLabel: '–û', start: null, end: null },
  sick: { label: '–ë–æ–ª—å–Ω–∏—á–Ω—ã–π', time: '', shortLabel: '–ë', start: null, end: null }
};

const initialData = {
  '–ê–ª—å–±–∏–Ω–∞': ['off', 'off', 'off', 'off', 'off', 'off', 'off', 'off', 'off', 'off', 'off', 'off', 'off', 'off'],
  '–ê–Ω–∞—Å—Ç–∞—Å–∏—è': [],
  '–ê—Ä–∏–Ω–∞': ['off', 'off', 'off', 'off', 'off', 'off', 'off', 'off', 'off', 'off', 'off', 'off', 'off', 'off'],
  '–ê–ª–∏—è': ['', '', 'off', 'off', '', '', '', 'off', '', '', '', '', '', '']
};

function App() {
  // Ably –∫–ª–∏–µ–Ω—Ç
  const ablyClient = useRef(null);
  const channel = useRef(null);
  const myClientId = useRef(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const [connectionState, setConnectionState] = useState('disconnected');
  const [onlineUsers, setOnlineUsers] = useState(new Set());

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  const [settings, setSettings] = useState(() => {
    const saved = localStorage.getItem('schedule-planner-settings');
    if (saved) {
      try {
        return JSON.parse(saved);
      } catch (e) {
        console.error('Error loading settings from localStorage:', e);
      }
    }
    return {
      employees: defaultEmployees,
      shiftTypes: defaultShiftTypes,
      websocket: {
        url: '',
        apiKey: '',
        roomId: '',
        enabled: false
      },
      debug: false
    };
  });

  const [schedule, setSchedule] = useState(() => {
    const saved = localStorage.getItem('schedule-planner-data');
    if (saved) {
      try {
        return JSON.parse(saved);
      } catch (e) {
        console.error('Error loading schedule from localStorage:', e);
      }
    }
    
    const initial = {};
    settings.employees.forEach((emp, empIndex) => {
      for (let day = 0; day < 14; day++) {
        const key = `${empIndex}-${day}`;
        if (initialData[emp] && initialData[emp][day]) {
          initial[key] = initialData[emp][day];
        }
      }
    });
    return initial;
  });

  const [currentView, setCurrentView] = useState(() => {
    return localStorage.getItem('schedule-planner-view') || 'grid';
  });

  const [popup, setPopup] = useState({ open: false, empIndex: null, dayIndex: null });
  const [settingsModal, setSettingsModal] = useState(false);
  const [bulkEditMode, setBulkEditMode] = useState(false);
  const [selectedCells, setSelectedCells] = useState(new Set());
  const [dropdownOpen, setDropdownOpen] = useState(false);
  const [activeSettingsTab, setActiveSettingsTab] = useState('employees');
  
  const [selectedDay, setSelectedDay] = useState(() => {
    const saved = localStorage.getItem('schedule-planner-selected-day');
    return saved ? parseInt(saved) : null;
  });

  const [filters, setFilters] = useState(() => {
    const saved = localStorage.getItem('schedule-planner-filters');
    if (saved) {
      try {
        return JSON.parse(saved);
      } catch (e) {
        console.error('Error loading filters from localStorage:', e);
      }
    }
    return {
      morning: true,
      day: true,
      evening: true,
      night: true,
      off: true,
      vacation: true,
      sick: true,
      empty: true
    };
  });

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ localStorage
  useEffect(() => {
    localStorage.setItem('schedule-planner-settings', JSON.stringify(settings));
  }, [settings]);

  useEffect(() => {
    localStorage.setItem('schedule-planner-data', JSON.stringify(schedule));
  }, [schedule]);

  useEffect(() => {
    localStorage.setItem('schedule-planner-view', currentView);
  }, [currentView]);

  useEffect(() => {
    localStorage.setItem('schedule-planner-filters', JSON.stringify(filters));
  }, [filters]);

  useEffect(() => {
    if (selectedDay !== null) {
      localStorage.setItem('schedule-planner-selected-day', selectedDay.toString());
    }
  }, [selectedDay]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è debug –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  const debugLog = (message, ...args) => {
    if (settings.debug) {
      console.log(message, ...args);
    }
  };

  // Ably –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
  const connectToAbly = async () => {
    if (!settings.websocket.enabled || 
        !settings.websocket.apiKey.trim() || 
        !settings.websocket.roomId.trim()) {
      debugLog('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ably');
      return;
    }

    try {
      setConnectionState('connecting');
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∫–ª–∏–µ–Ω—Ç–∞
      myClientId.current = `user-${Math.random().toString(36).substr(2, 9)}`;
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Ably
      ablyClient.current = new Ably.Realtime({
        key: settings.websocket.apiKey,
        clientId: myClientId.current,
        recover: true
      });

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      ablyClient.current.connection.on('connected', () => {
        setConnectionState('connected');
        debugLog('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Ably. Client ID:', myClientId.current);
        debugLog('Room ID:', settings.websocket.roomId);
      });

      ablyClient.current.connection.on('disconnected', () => {
        setConnectionState('disconnected');
        debugLog('–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç Ably');
      });

      ablyClient.current.connection.on('failed', (error) => {
        setConnectionState('failed');
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ably:', error);
      });

      // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª (—É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏–∑ Room ID)
      const roomId = settings.websocket.roomId.trim();
      channel.current = ablyClient.current.channels.get(roomId);
      debugLog('–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–∞–Ω–∞–ª—É:', roomId);

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
      channel.current.on('attached', () => {
        debugLog('‚úÖ –ö–∞–Ω–∞–ª –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
      });

      channel.current.on('failed', (err) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∫–∞–Ω–∞–ª–∞:', err);
      });

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
      channel.current.subscribe('schedule-update', (message) => {
        debugLog('üì® –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', message.data);
        debugLog('üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', message.data?.userId, '–ú–æ–π ID:', myClientId.current);
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (message.data && message.data.schedule && message.data.userId !== myClientId.current) {
          debugLog('‚úÖ –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
          setSchedule(message.data.schedule);
        } else {
          debugLog('‚è≠Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
        }
      });

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
      channel.current.subscribe('settings-update', (message) => {
        debugLog('–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', message.data);
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (message.data && message.data.settings && message.data.userId !== myClientId.current) {
          debugLog('–ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ employees –∏ shiftTypes, –Ω–µ websocket –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
          setSettings(prev => ({
            ...prev,
            employees: message.data.settings.employees || prev.employees,
            shiftTypes: message.data.settings.shiftTypes || prev.shiftTypes
          }));
        }
      });

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      channel.current.subscribe('test-message', (message) => {
        debugLog('üß™ –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message.data);
        if (message.data.userId !== myClientId.current) {
          debugLog('‚úÖ –¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!');
        }
      });

      // Presence - –ø–æ–∫–∞–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      channel.current.presence.enter({ 
        username: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${Math.floor(Math.random() * 1000)}`,
        joinedAt: new Date().toISOString()
      });

      channel.current.presence.subscribe((presenceMsg) => {
        channel.current.presence.get((err, members) => {
          if (!err && Array.isArray(members)) {
            setOnlineUsers(new Set(members.map(member => member.data.username)));
          }
        });
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Ably:', error);
      setConnectionState('failed');
    }
  };

  const disconnectFromAbly = () => {
    if (channel.current) {
      try {
        channel.current.presence.leave();
        channel.current.unsubscribe();
      } catch (error) {
        debugLog('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ (–Ω–æ—Ä–º):', error.message);
      }
      channel.current = null;
    }

    if (ablyClient.current) {
      try {
        ablyClient.current.close();
      } catch (error) {
        debugLog('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–æ—Ä–º):', error.message);
      }
      ablyClient.current = null;
    }

    myClientId.current = null;
    setConnectionState('disconnected');
    setOnlineUsers(new Set());
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ Ably
  const publishScheduleUpdate = (newSchedule) => {
    debugLog('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
    debugLog('üìä State - channel:', !!channel.current, 'connected:', connectionState === 'connected');
    
    if (channel.current && connectionState === 'connected') {
      const message = {
        schedule: newSchedule,
        timestamp: new Date().toISOString(),
        userId: myClientId.current
      };
      debugLog('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', message);
      
      channel.current.publish('schedule-update', message).then(() => {
        debugLog('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      }).catch((error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      });
    } else {
      debugLog('‚ùå –ù–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: –∫–∞–Ω–∞–ª –Ω–µ –≥–æ—Ç–æ–≤ –∏–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
    }
  };

  const publishSettingsUpdate = (newSettings) => {
    if (channel.current && connectionState === 'connected') {
      const message = {
        settings: {
          employees: newSettings.employees,
          shiftTypes: newSettings.shiftTypes
        },
        timestamp: new Date().toISOString(),
        userId: myClientId.current
      };
      debugLog('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', message);
      channel.current.publish('settings-update', message);
    }
  };

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  useEffect(() => {
    // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    disconnectFromAbly();
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã
    if (settings.websocket.enabled && 
        settings.websocket.apiKey.trim() && 
        settings.websocket.roomId.trim()) {
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å React Strict Mode
      const timer = setTimeout(() => {
        connectToAbly();
      }, 100);
      
      return () => {
        clearTimeout(timer);
        disconnectFromAbly();
      };
    }
    
    return () => {
      disconnectFromAbly();
    };
  }, [settings.websocket.enabled, settings.websocket.apiKey, settings.websocket.roomId]);

  // –ó–∞–∫—Ä—ã—Ç–∏–µ dropdown –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (dropdownOpen && !event.target.closest('.dropdown')) {
        setDropdownOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [dropdownOpen]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
  const handleEmployeeChange = (index, value) => {
    const newEmployees = [...settings.employees];
    newEmployees[index] = value;
    const newSettings = { ...settings, employees: newEmployees };
    setSettings(newSettings);
    publishSettingsUpdate(newSettings);
  };

  const handleRemoveEmployee = (index) => {
    const newEmployees = settings.employees.filter((_, i) => i !== index);
    const newSettings = { ...settings, employees: newEmployees };
    setSettings(newSettings);
    publishSettingsUpdate(newSettings);
  };

  const handleAddEmployee = () => {
    const newSettings = { 
      ...settings, 
      employees: [...settings.employees, '–ù–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫'] 
    };
    setSettings(newSettings);
    publishSettingsUpdate(newSettings);
  };

  const handleShiftTypeChange = (key, field, value) => {
    const newShiftTypes = {
      ...settings.shiftTypes,
      [key]: { ...settings.shiftTypes[key], [field]: value }
    };
    
    // –û–±–Ω–æ–≤–ª—è–µ–º time –¥–ª—è —Å–º–µ–Ω —Å –≤—Ä–µ–º–µ–Ω–µ–º
    if (field === 'start' || field === 'end') {
      const shiftType = newShiftTypes[key];
      if (shiftType.start !== null && shiftType.end !== null) {
        newShiftTypes[key].time = `${shiftType.start}:00-${shiftType.end}:00`;
      }
    }
    
    const newSettings = { ...settings, shiftTypes: newShiftTypes };
    setSettings(newSettings);
    publishSettingsUpdate(newSettings);
  };

  const handleRemoveShiftType = (key) => {
    const newShiftTypes = { ...settings.shiftTypes };
    delete newShiftTypes[key];
    const newSettings = { ...settings, shiftTypes: newShiftTypes };
    setSettings(newSettings);
    publishSettingsUpdate(newSettings);
  };

  const getShiftText = (shiftType) => {
    return settings.shiftTypes[shiftType]?.shortLabel || '';
  };

  const handleShiftChange = (shiftType) => {
    debugLog('üîÑ handleShiftChange –≤—ã–∑–≤–∞–Ω —Å —Ç–∏–ø–æ–º:', shiftType);
    let newSchedule;
    
    if (bulkEditMode && selectedCells.size > 0) {
      // –ú–∞—Å—Å–æ–≤–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      setSchedule(prev => {
        newSchedule = { ...prev };
        selectedCells.forEach(cellKey => {
          if (shiftType === 'clear') {
            delete newSchedule[cellKey];
          } else {
            newSchedule[cellKey] = shiftType;
          }
        });
        debugLog('üìä –ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–º–∞—Å—Å–æ–≤–æ–µ):', newSchedule);
        publishScheduleUpdate(newSchedule);
        return newSchedule;
      });
      setSelectedCells(new Set());
    } else {
      // –û–±—ã—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      if (popup.empIndex === null || popup.dayIndex === null) return;
      
      const key = `${popup.empIndex}-${popup.dayIndex}`;
      setSchedule(prev => {
        newSchedule = { ...prev };
        if (shiftType === 'clear') {
          delete newSchedule[key];
        } else {
          newSchedule[key] = shiftType;
        }
        debugLog('üìä –ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–æ–±—ã—á–Ω–æ–µ):', newSchedule);
        publishScheduleUpdate(newSchedule);
        return newSchedule;
      });
    }
    
    setPopup({ open: false, empIndex: null, dayIndex: null });
  };

  const openPopup = (empIndex, dayIndex) => {
    setPopup({ open: true, empIndex, dayIndex });
  };

  const closePopup = () => {
    setPopup({ open: false, empIndex: null, dayIndex: null });
  };

  const switchView = (view) => {
    setCurrentView(view);
  };

  const handleCellClick = (empIndex, dayIndex, event) => {
    if (bulkEditMode) {
      const key = `${empIndex}-${dayIndex}`;
      setSelectedCells(prev => {
        const newSet = new Set(prev);
        if (newSet.has(key)) {
          newSet.delete(key);
        } else {
          newSet.add(key);
        }
        return newSet;
      });
    } else {
      openPopup(empIndex, dayIndex);
    }
  };

  const handleCellRightClick = (event) => {
    if (bulkEditMode && selectedCells.size > 0) {
      event.preventDefault();
      setPopup({ open: true, empIndex: null, dayIndex: null });
    }
  };

  const toggleFilter = (filterType) => {
    setFilters(prev => ({
      ...prev,
      [filterType]: !prev[filterType]
    }));
  };

  const shouldShowEmployee = (empIndex) => {
    for (let day = 0; day < 14; day++) {
      const key = `${empIndex}-${day}`;
      const shiftType = schedule[key];
      
      if (!shiftType && filters.empty) return true;
      if (shiftType && filters[shiftType]) return true;
    }
    return false;
  };

  const toggleBulkEdit = () => {
    setBulkEditMode(!bulkEditMode);
    setSelectedCells(new Set());
  };

  const handleDateClick = (dayIndex) => {
    setSelectedDay(dayIndex);
    setCurrentView('gantt');
  };

  const getShiftTime = (shiftType) => {
    const shiftData = settings.shiftTypes[shiftType];
    if (!shiftData || shiftData.start === null) return null;
    return {
      start: shiftData.start,
      end: shiftData.end,
      label: shiftData.label
    };
  };

  const getDayLabel = (dayIndex) => {
    const days = [
      '–ø–Ω 23', '–≤—Ç 24', '—Å—Ä 25', '—á—Ç 26', '–ø—Ç 27', '—Å–± 28', '–≤—Å 29',
      '–ø–Ω 30', '–≤—Ç 1', '—Å—Ä 2', '—á—Ç 3', '–ø—Ç 4', '—Å–± 5', '–≤—Å 6'
    ];
    return days[dayIndex] || '';
  };

  // –§—É–Ω–∫—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –∏–º–ø–æ—Ä—Ç–∞
  const exportData = () => {
    const data = {
      schedule,
      filters,
      currentView,
      selectedDay,
      exportDate: new Date().toISOString(),
      version: '1.0'
    };
    
    const dataStr = JSON.stringify(data, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);
    
    const link = document.createElement('a');
    link.href = url;
    link.download = `schedule-planner-${new Date().toISOString().split('T')[0]}.json`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  const importData = (event) => {
    const file = event.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        const data = JSON.parse(e.target.result);
        
        if (data.schedule) {
          setSchedule(data.schedule);
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Ably
          publishScheduleUpdate(data.schedule);
        }
        if (data.filters) setFilters(data.filters);
        if (data.currentView) setCurrentView(data.currentView);
        if (data.selectedDay !== undefined) setSelectedDay(data.selectedDay);
        
        alert('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!');
      } catch (error) {
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.');
        console.error('Import error:', error);
      }
    };
    reader.readAsText(file);
  };

  const clearAllData = () => {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
      const emptySchedule = {};
      setSchedule(emptySchedule);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Ably
      publishScheduleUpdate(emptySchedule);
      
      setFilters({
        morning: true,
        day: true,
        evening: true,
        night: true,
        off: true,
        vacation: true,
        sick: true,
        empty: true
      });
      setCurrentView('grid');
      setSelectedDay(null);
      setBulkEditMode(false);
      setSelectedCells(new Set());
      
      // –û—á–∏—Å—Ç–∫–∞ localStorage
      localStorage.removeItem('schedule-planner-data');
      localStorage.removeItem('schedule-planner-view');
      localStorage.removeItem('schedule-planner-filters');
      localStorage.removeItem('schedule-planner-selected-day');
      
      alert('–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã!');
    }
  };

  return (
    <div className="container">
      <div className="header">
        <h1>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–º–µ–Ω</h1>
        <div className="header-controls">
          <div className="view-toggle">
            <button 
              className={`view-btn ${currentView === 'grid' ? 'active' : ''}`}
              onClick={() => switchView('grid')}
            >
              –ö–∞–ª–µ–Ω–¥–∞—Ä—å
            </button>
            <button 
              className={`view-btn ${currentView === 'timeline' ? 'active' : ''}`}
              onClick={() => switchView('timeline')}
            >
              Timeline
            </button>
            {selectedDay !== null && (
              <button 
                className={`view-btn ${currentView === 'gantt' ? 'active' : ''}`}
                onClick={() => switchView('gantt')}
              >
                –ì–∞–Ω—Ç–∞ ({getDayLabel(selectedDay)})
              </button>
            )}
          </div>
          <div className="data-controls">
            <button 
              className={`bulk-edit-btn ${bulkEditMode ? 'active' : ''}`}
              onClick={toggleBulkEdit}
            >
              {bulkEditMode ? '–í—ã–π—Ç–∏ –∏–∑ –º–∞—Å—Å–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞' : '–ú–∞—Å—Å–æ–≤–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'}
            </button>
            
            <div className={`dropdown ${dropdownOpen ? 'open' : ''}`}>
              <button 
                className="dropdown-btn"
                onClick={() => setDropdownOpen(!dropdownOpen)}
              >
                ‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
              </button>
              <div className="dropdown-content">
                <button onClick={() => {
                  setSettingsModal(true);
                  setDropdownOpen(false);
                }}>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</button>
                <button onClick={() => {
                  exportData();
                  setDropdownOpen(false);
                }}>üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</button>
                <label className="import-btn">
                  üì§ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
                  <input 
                    type="file" 
                    accept=".json" 
                    onChange={(e) => {
                      importData(e);
                      setDropdownOpen(false);
                    }}
                    style={{ display: 'none' }}
                  />
                </label>
                <button onClick={() => {
                  clearAllData();
                  setDropdownOpen(false);
                }} className="danger-btn">üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ</button>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <div className="content">
        <div className="status-bar">
          <div className="save-status">
            üíæ –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
          </div>
          {settings.websocket.enabled && (
            <div className={`connection-status ${connectionState}`}>
              {connectionState === 'connected' && 'üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ'}
              {connectionState === 'connecting' && 'üü° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...'}
              {connectionState === 'disconnected' && 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω–æ'}
              {connectionState === 'failed' && '‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'}
              {onlineUsers.size > 1 && ` (${onlineUsers.size} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω)`}
            </div>
          )}
        </div>

        <div className="legend">
          <div className="filter-header">–§–∏–ª—å—Ç—Ä—ã:</div>
          {Object.entries(settings.shiftTypes).map(([key, shiftType]) => (
            <div 
              key={key}
              className={`legend-item filter ${filters[key] ? 'active' : 'inactive'}`}
              onClick={() => toggleFilter(key)}
            >
              <div className={`legend-color shift-${key}`}></div>
              <span>{shiftType.label} {shiftType.time && `(${shiftType.time})`}</span>
            </div>
          ))}
          <div 
            className={`legend-item filter ${filters.empty ? 'active' : 'inactive'}`}
            onClick={() => toggleFilter('empty')}
          >
            <div className="legend-color empty-shift"></div>
            <span>–ü—É—Å—Ç—ã–µ</span>
          </div>
        </div>

        {/* –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ */}
        {currentView === 'grid' && (
          <div className="grid-view">
            <div className="schedule-grid">
              <div className="grid-header">
                <div>–ò–º—è</div>
                <div className="weekend date-header" onClick={() => handleDateClick(0)}>–ø–Ω<br />23</div>
                <div className="date-header" onClick={() => handleDateClick(1)}>–≤—Ç<br />24</div>
                <div className="date-header" onClick={() => handleDateClick(2)}>—Å—Ä<br />25</div>
                <div className="date-header" onClick={() => handleDateClick(3)}>—á—Ç<br />26</div>
                <div className="date-header" onClick={() => handleDateClick(4)}>–ø—Ç<br />27</div>
                <div className="weekend date-header" onClick={() => handleDateClick(5)}>—Å–±<br />28</div>
                <div className="weekend date-header" onClick={() => handleDateClick(6)}>–≤—Å<br />29</div>
                <div className="date-header" onClick={() => handleDateClick(7)}>–ø–Ω<br />30</div>
                <div className="today date-header" onClick={() => handleDateClick(8)}>–≤—Ç<br />1</div>
                <div className="date-header" onClick={() => handleDateClick(9)}>—Å—Ä<br />2</div>
                <div className="date-header" onClick={() => handleDateClick(10)}>—á—Ç<br />3</div>
                <div className="date-header" onClick={() => handleDateClick(11)}>–ø—Ç<br />4</div>
                <div className="weekend date-header" onClick={() => handleDateClick(12)}>—Å–±<br />5</div>
                <div className="weekend date-header" onClick={() => handleDateClick(13)}>–≤—Å<br />6</div>
              </div>
              {settings.employees.map((employee, empIndex) => {
                if (!shouldShowEmployee(empIndex)) return null;
                
                return (
                  <div className="grid-row" key={empIndex}>
                    <div className="employee-name">{employee}</div>
                    {Array.from({ length: 14 }, (_, dayIndex) => {
                      const key = `${empIndex}-${dayIndex}`;
                      const isSelected = selectedCells.has(key);
                      return (
                        <div
                          key={dayIndex}
                          className={`day-cell ${isSelected ? 'selected' : ''} ${bulkEditMode ? 'bulk-mode' : ''}`}
                          onClick={(e) => handleCellClick(empIndex, dayIndex, e)}
                          onContextMenu={handleCellRightClick}
                        >
                          {schedule[key] && (
                            <div className={`shift-indicator shift-${schedule[key]}`}>
                              {getShiftText(schedule[key])}
                            </div>
                          )}
                        </div>
                      );
                    })}
                  </div>
                );
              })}
            </div>
          </div>
        )}

        {/* Timeline –≤–∏–¥ */}
        {currentView === 'timeline' && (
          <div className="timeline-view">
            <div className="timeline-container">
              <div className="timeline-header">
                <div className="timeline-employee-header">–°–æ—Ç—Ä—É–¥–Ω–∏–∫</div>
                <div className="timeline-dates">
                  <div className="timeline-date weekend">–ø–Ω 23</div>
                  <div className="timeline-date">–≤—Ç 24</div>
                  <div className="timeline-date">—Å—Ä 25</div>
                  <div className="timeline-date">—á—Ç 26</div>
                  <div className="timeline-date">–ø—Ç 27</div>
                  <div className="timeline-date weekend">—Å–± 28</div>
                  <div className="timeline-date weekend">–≤—Å 29</div>
                  <div className="timeline-date">–ø–Ω 30</div>
                  <div className="timeline-date today">–≤—Ç 1</div>
                  <div className="timeline-date">—Å—Ä 2</div>
                  <div className="timeline-date">—á—Ç 3</div>
                  <div className="timeline-date">–ø—Ç 4</div>
                  <div className="timeline-date weekend">—Å–± 5</div>
                  <div className="timeline-date weekend">–≤—Å 6</div>
                </div>
              </div>
              {settings.employees.map((employee, empIndex) => {
                if (!shouldShowEmployee(empIndex)) return null;
                
                return (
                  <div className="timeline-row" key={empIndex}>
                    <div className="timeline-employee">{employee}</div>
                    <div className="timeline-schedule">
                      {Array.from({ length: 14 }, (_, dayIndex) => {
                        const key = `${empIndex}-${dayIndex}`;
                        const isSelected = selectedCells.has(key);
                        return (
                          <div
                            key={dayIndex}
                            className={`timeline-cell ${isSelected ? 'selected' : ''} ${bulkEditMode ? 'bulk-mode' : ''}`}
                            onClick={(e) => handleCellClick(empIndex, dayIndex, e)}
                            onContextMenu={handleCellRightClick}
                          >
                            {schedule[key] && (
                              <div className={`timeline-shift shift-${schedule[key]}`}>
                                {getShiftText(schedule[key])}
                              </div>
                            )}
                          </div>
                        );
                      })}
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        )}

        {/* Gantt Timeline –≤–∏–¥ */}
        {currentView === 'gantt' && selectedDay !== null && (
          <div className="gantt-view">
            <div className="gantt-header">
              <h2>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {getDayLabel(selectedDay)}</h2>
              <button className="back-btn" onClick={() => setCurrentView('grid')}>
                ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
              </button>
            </div>
            
            <div className="gantt-container">
              {/* –í—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞ */}
              <div className="time-scale">
                <div className="time-scale-header">–í—Ä–µ–º—è</div>
                <div className="time-hours">
                  {Array.from({ length: 24 }, (_, hour) => (
                    <div key={hour} className="time-hour">
                      {hour.toString().padStart(2, '0')}:00
                    </div>
                  ))}
                </div>
              </div>
              
              {/* –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∏ –∏—Ö —Å–º–µ–Ω—ã */}
              <div className="gantt-employees">
                <div className="gantt-employees-header">–°–æ—Ç—Ä—É–¥–Ω–∏–∫</div>
                <div className="gantt-rows">
                  {settings.employees.map((employee, empIndex) => {
                    const key = `${empIndex}-${selectedDay}`;
                    const shiftType = schedule[key];
                    const shiftTime = shiftType ? getShiftTime(shiftType) : null;
                    
                    if (!shouldShowEmployee(empIndex)) return null;
                    
                    return (
                      <div key={empIndex} className="gantt-row">
                        <div className="gantt-employee-name">{employee}</div>
                        <div className="gantt-timeline">
                          {/* 24 —á–∞—Å–æ–≤–∞—è —Å–µ—Ç–∫–∞ */}
                          {Array.from({ length: 24 }, (_, hour) => (
                            <div key={hour} className="gantt-hour-cell"></div>
                          ))}
                          
                          {/* –ë–ª–æ–∫ —Å–º–µ–Ω—ã */}
                          {shiftTime && (
                            <div 
                              className={`gantt-shift shift-${shiftType}`}
                              style={{
                                left: `${(shiftTime.start / 24) * 100}%`,
                                width: `${((shiftTime.end - shiftTime.start) / 24) * 100}%`
                              }}
                            >
                              <span className="gantt-shift-label">
                                {shiftTime.label} ({shiftTime.start}:00-{shiftTime.end}:00)
                              </span>
                            </div>
                          )}
                          
                          {/* –°—Ç–∞—Ç—É—Å—ã –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ */}
                          {shiftType && !shiftTime && (
                            <div className={`gantt-status shift-${shiftType}`}>
                              {shiftType === 'off' && '–í—ã—Ö–æ–¥–Ω–æ–π'}
                              {shiftType === 'vacation' && '–û—Ç–ø—É—Å–∫'}
                              {shiftType === 'sick' && '–ë–æ–ª—å–Ω–∏—á–Ω—ã–π'}
                            </div>
                          )}
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Popup –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–º–µ–Ω—ã */}
        {popup.open && (
          <div className="popup-overlay" onClick={closePopup}>
            <div className="popup" onClick={(e) => e.stopPropagation()}>
              <h3>
                {bulkEditMode && selectedCells.size > 0 
                  ? `–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–º–µ–Ω—ã –¥–ª—è ${selectedCells.size} —è—á–µ–µ–∫` 
                  : '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–º–µ–Ω—ã'
                }
              </h3>
              <div className="shift-options">
                {Object.entries(settings.shiftTypes).map(([key, shiftType]) => (
                  <div key={key} className={`shift-option shift-${key}`} onClick={() => handleShiftChange(key)}>
                    {shiftType.label}{shiftType.time && <br />}{shiftType.time}
                  </div>
                ))}
                <div 
                  className="shift-option" 
                  style={{ background: '#fff', color: '#333', border: '2px solid #ddd' }}
                  onClick={() => handleShiftChange('clear')}
                >
                  –û—á–∏—Å—Ç–∏—Ç—å
                </div>
              </div>
              <div className="popup-buttons">
                <button className="btn btn-cancel" onClick={closePopup}>–û—Ç–º–µ–Ω–∞</button>
              </div>
            </div>
          </div>
        )}

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ */}
        {settingsModal && (
          <div className="settings-overlay" onClick={() => setSettingsModal(false)}>
            <div className="settings-modal" onClick={(e) => e.stopPropagation()}>
              <div className="settings-header">
                <h2>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</h2>
                <button className="close-btn" onClick={() => setSettingsModal(false)}>√ó</button>
              </div>
              
              <div className="settings-content">
                <div className="settings-section">
                  <h3>–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏</h3>
                  <div className="employees-list">
                    {settings.employees.map((employee, index) => (
                      <div key={index} className="employee-item">
                        <input 
                          type="text" 
                          value={employee}
                          onChange={(e) => handleEmployeeChange(index, e.target.value)}
                        />
                        <button 
                          className="remove-btn"
                          onClick={() => handleRemoveEmployee(index)}
                        >
                          üóëÔ∏è
                        </button>
                      </div>
                    ))}
                  </div>
                  <button 
                    className="add-btn"
                    onClick={handleAddEmployee}
                  >
                    + –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                  </button>
                </div>

                <div className="settings-section">
                  <h3>–¢–∏–ø—ã —Å–º–µ–Ω</h3>
                  <div className="shift-types-list">
                    {Object.entries(settings.shiftTypes).map(([key, shiftType]) => (
                      <div key={key} className="shift-type-item">
                        <div className="shift-type-inputs">
                          <input 
                            type="text" 
                            placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ"
                            value={shiftType.label}
                            onChange={(e) => handleShiftTypeChange(key, 'label', e.target.value)}
                          />
                          <input 
                            type="text" 
                            placeholder="–ö—Ä–∞—Ç–∫–æ–µ"
                            value={shiftType.shortLabel}
                            maxLength={2}
                            onChange={(e) => handleShiftTypeChange(key, 'shortLabel', e.target.value)}
                          />
                          {shiftType.start !== null && (
                            <>
                              <input 
                                type="number" 
                                placeholder="–ù–∞—á–∞–ª–æ"
                                min="0" max="23"
                                value={shiftType.start}
                                onChange={(e) => handleShiftTypeChange(key, 'start', parseInt(e.target.value))}
                              />
                              <input 
                                type="number" 
                                placeholder="–ö–æ–Ω–µ—Ü"
                                min="0" max="24"
                                value={shiftType.end}
                                onChange={(e) => handleShiftTypeChange(key, 'end', parseInt(e.target.value))}
                              />
                            </>
                          )}
                        </div>
                        <button 
                          className="remove-btn"
                          onClick={() => handleRemoveShiftType(key)}
                        >
                          üóëÔ∏è
                        </button>
                      </div>
                    ))}
                  </div>
                </div>

                <div className="settings-section">
                  <h3>Ably Real-time Sync</h3>
                  <div className="websocket-settings">
                    <div className="ably-info">
                      <p><strong>üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:</strong></p>
                      <ol>
                        <li>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ <a href="https://ably.com" target="_blank" rel="noopener noreferrer">ably.com</a> (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)</li>
                        <li>–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</li>
                        <li>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ API –∫–ª—é—á –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "API Keys"</li>
                        <li>–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∏–∂–µ –∏ –≤–∫–ª—é—á–∏—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é</li>
                      </ol>
                    </div>
                    
                    <label>
                      <input 
                        type="checkbox"
                        checked={settings.websocket.enabled}
                        onChange={(e) => {
                          setSettings(prev => ({
                            ...prev,
                            websocket: { ...prev.websocket, enabled: e.target.checked }
                          }));
                        }}
                      />
                      –í–∫–ª—é—á–∏—Ç—å real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
                    </label>
                    
                    <input 
                      type="password"
                      placeholder="Ably API Key (–Ω–∞–ø—Ä–∏–º–µ—Ä: abc123.def456:xyz789)"
                      value={settings.websocket.apiKey}
                      onChange={(e) => {
                        setSettings(prev => ({
                          ...prev,
                          websocket: { ...prev.websocket, apiKey: e.target.value }
                        }));
                      }}
                      disabled={!settings.websocket.enabled}
                    />
                    
                    <input 
                      type="text"
                      placeholder="Room ID (–Ω–∞–ø—Ä–∏–º–µ—Ä: simple-scheduler-mv)"
                      value={settings.websocket.roomId}
                      onChange={(e) => {
                        setSettings(prev => ({
                          ...prev,
                          websocket: { ...prev.websocket, roomId: e.target.value }
                        }));
                      }}
                      disabled={!settings.websocket.enabled}
                    />
                    
                    {connectionState === 'connected' && (
                      <div className="ably-status success">
                        ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ! –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                      </div>
                    )}
                    
                    {connectionState === 'failed' && (
                      <div className="ably-status error">
                        ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                      </div>
                    )}
                    
                    {connectionState === 'connected' && (
                      <button 
                        className="btn btn-primary"
                        onClick={() => {
                          const testMessage = {
                            test: true,
                            timestamp: new Date().toISOString(),
                            userId: myClientId.current
                          };
                          debugLog('üß™ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
                          channel.current.publish('test-message', testMessage);
                        }}
                        style={{ marginTop: '10px' }}
                      >
                        üß™ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                      </button>
                    )}
                  </div>
                </div>

                <div className="settings-section">
                  <h3>–û—Ç–ª–∞–¥–∫–∞</h3>
                  <div className="debug-settings">
                    <label>
                      <input 
                        type="checkbox"
                        checked={settings.debug}
                        onChange={(e) => {
                          setSettings(prev => ({
                            ...prev,
                            debug: e.target.checked
                          }));
                        }}
                      />
                      –í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ (–ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏)
                    </label>
                    
                    {settings.debug && (
                      <div className="debug-info">
                        <p>üêõ <strong>–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω</strong></p>
                        <p>–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ (F12 ‚Üí Console)</p>
                      </div>
                    )}
                  </div>
                </div>
              </div>
              
              <div className="settings-footer">
                <button className="btn btn-cancel" onClick={() => setSettingsModal(false)}>
                  –û—Ç–º–µ–Ω–∞
                </button>
                <button className="btn btn-primary" onClick={() => setSettingsModal(false)}>
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  )
}

export default App
