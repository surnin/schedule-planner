import fs from 'fs-extra';

// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–µ–π—à–∏–π –≤–∞–ª–∏–¥–Ω—ã–π PNG —Ñ–∞–π–ª (–æ–¥–Ω–æ—Ü–≤–µ—Ç–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç)
const createSimplePNG = (size) => {
  // –ë–∞–∑–æ–≤—ã–π PNG - —Å–∏–Ω–∏–π –∫–≤–∞–¥—Ä–∞—Ç
  const pixels = [];
  for (let y = 0; y < size; y++) {
    for (let x = 0; x < size; x++) {
      // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç –æ—Ç —Å–∏–Ω–µ–≥–æ –∫ —Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–º—É
      const ratio = (x + y) / (size * 2);
      const r = Math.floor(0x66 + (0x76 - 0x66) * ratio);
      const g = Math.floor(0x7e + (0x4b - 0x7e) * ratio);
      const b = Math.floor(0xea + (0xa2 - 0xea) * ratio);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –±–µ–ª—É—é –±—É–∫–≤—É S –≤ —Ü–µ–Ω—Ç—Ä–µ
      const centerX = size / 2;
      const centerY = size / 2;
      const dist = Math.sqrt((x - centerX) ** 2 + (y - centerY) ** 2);
      
      if (size >= 32) {
        // –î–ª—è –±–æ–ª—å—à–∏—Ö –∏–∫–æ–Ω–æ–∫ –¥–æ–±–∞–≤–ª—è–µ–º –±—É–∫–≤—É S
        const letterSize = size / 4;
        if (Math.abs(x - centerX) < letterSize/2 && Math.abs(y - centerY) < letterSize) {
          pixels.push(255, 255, 255); // –±–µ–ª—ã–π
          continue;
        }
      }
      
      pixels.push(r, g, b);
    }
  }
  
  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PNG Buffer
  // –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è, —Å–æ–∑–¥–∞–¥–∏–º –ø—Ä–æ—Å—Ç–æ–π PNG –∑–∞–≥–æ–ª–æ–≤–æ–∫
  const signature = Buffer.from([0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A]);
  
  // IHDR
  const ihdr = Buffer.alloc(25);
  ihdr.writeUInt32BE(13, 0);
  ihdr.write('IHDR', 4);
  ihdr.writeUInt32BE(size, 8);
  ihdr.writeUInt32BE(size, 12);
  ihdr.writeUInt8(8, 16);  // bit depth
  ihdr.writeUInt8(2, 17);  // color type RGB
  ihdr.writeUInt8(0, 18);  // compression
  ihdr.writeUInt8(0, 19);  // filter
  ihdr.writeUInt8(0, 20);  // interlace
  
  // –ü—Ä–æ—Å—Ç–æ–π CRC (–Ω–µ —Ç–æ—á–Ω—ã–π, –Ω–æ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å)
  const crc = 0x5BAE22E0;
  ihdr.writeUInt32BE(crc, 21);
  
  // –ü—Ä–æ—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∏–∫—Å–µ–ª–µ–π
  const pixelBuffer = Buffer.from(pixels);
  const idat = Buffer.alloc(pixelBuffer.length + 12);
  idat.writeUInt32BE(pixelBuffer.length, 0);
  idat.write('IDAT', 4);
  pixelBuffer.copy(idat, 8);
  idat.writeUInt32BE(0x12345678, 8 + pixelBuffer.length);
  
  // IEND
  const iend = Buffer.from([0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82]);
  
  return Buffer.concat([signature, ihdr, idat, iend]);
};

// –ï—â–µ –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥ - —Å–æ–∑–¥–∞–µ–º –∫—Ä–æ—à–µ—á–Ω—ã–µ PNG —Ñ–∞–π–ª—ã
const createTinyPNG = (size) => {
  // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π PNG —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
  const data = Buffer.from([
    // PNG signature
    0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A,
    // IHDR chunk
    0x00, 0x00, 0x00, 0x0D,  // chunk length
    0x49, 0x48, 0x44, 0x52,  // IHDR
    0x00, 0x00, 0x00, size,  // width
    0x00, 0x00, 0x00, size,  // height
    0x01, 0x00, 0x00, 0x00, 0x00,  // bit depth 1, grayscale
    0x37, 0x6E, 0xF9, 0x24,  // CRC
    // IDAT chunk (minimal)
    0x00, 0x00, 0x00, 0x0A,  // chunk length
    0x49, 0x44, 0x41, 0x54,  // IDAT
    0x78, 0x9C, 0x62, 0x00, 0x02, 0x00, 0x00, 0x05, 0x00, 0x01,  // compressed data
    0x0D, 0x0A, 0x2D, 0xB4,  // CRC
    // IEND chunk
    0x00, 0x00, 0x00, 0x00,  // chunk length
    0x49, 0x45, 0x4E, 0x44,  // IEND
    0xAE, 0x42, 0x60, 0x82   // CRC
  ]);
  
  // Adjusting size in the header
  data[16] = size; // width
  data[20] = size; // height
  
  return data;
};

async function fixIcons() {
  console.log('üîß Fixing extension icons...');
  
  const sizes = [16, 32, 48, 128];
  
  for (const size of sizes) {
    try {
      const iconData = createTinyPNG(size);
      await fs.writeFile(`./dist-extension/icon${size}.png`, iconData);
      console.log(`‚úÖ Fixed icon${size}.png (${iconData.length} bytes)`);
    } catch (error) {
      console.error(`‚ùå Error fixing icon${size}.png:`, error.message);
    }
  }
  
  console.log('üéâ All icons fixed!');
}

fixIcons().catch(console.error);